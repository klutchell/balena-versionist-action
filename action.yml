name: Versionist
description: "Automatic versioning of source files with balena-versionist"

inputs:
  github_token:
    description: "Personal access token (PAT) for the GitHub service account with admin/owner permissions"
    required: true
  gpg_private_key:
    description: "GPG private key exported with `gpg --armor --export-secret-keys ...` to sign commits"
    required: true
  gpg_passphrase:
    description: "Passphrase to decrypt GPG private key"
    required: false
  balena_versionist_version:
    description: "Use a specific release of balena-versionist"
    required: false
    default: "latest"
  versionist_version:
    description: "Use a specific release of versionist"
    required: false
    default: "latest"

outputs:
  version:
    description: "Generated version"
    value: ${{ steps.versionist.outputs.version }}
  tag:
    description: "Generated tag. Same as version but with a `v` prefix."
    value: ${{ steps.versionist.outputs.tag }}
  artifact:
    description: "Name of the uploaded versioned source artifact"
    value: ${{ steps.versionist.outputs.artifact }}
  changed:
    description: "Whether the source files were changed"
    value: ${{ steps.versionist.outputs.changed }}
  error:
    description: "Error message from versionist, if any"
    value: ${{ steps.versionist.outputs.error }}

runs:
  using: "composite"
  steps:
    - name: Log GitHub context
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "${GITHUB_CONTEXT}" || true

    - name: Import GPG key for signing commits
      id: import-gpg
      uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549 # v5.2.0
      with:
        gpg_private_key: ${{ inputs.gpg_private_key }}
        passphrase: ${{ inputs.gpg_passphrase }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Setup Node.js 16.x
      uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3
      with:
        node-version: 16.x

    - name: Setup arkade
      uses: alexellis/setup-arkade@v2

    - name: Install balena-versionist and versionist
      shell: bash
      run: |
        npm install -g \
          balena-versionist@${{ inputs.balena_versionist_version }} \
          versionist@${{ inputs.versionist_version }}

    - name: Setup yq 3.x
      uses: alexellis/arkade-get@a7fbca59ab9fb4364b1b491b6d379e5f4c350eee
      with:
        yq: "3.4.1"

    - name: Generate changelog
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        if [ ! -f .versionbot/CHANGELOG.yml ]
        then
          $(npm root -g)/versionist/scripts/generate-changelog.sh .
        fi

    - name: Setup yq 4.x
      uses: alexellis/arkade-get@a7fbca59ab9fb4364b1b491b6d379e5f4c350eee
      with:
        yq: "v4.32.2"

    - name: Run versionist
      shell: bash
      id: versionist
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        out="$(balena-versionist 2>&1)"
        error="$(awk '/Error:/{getline; print}' <<< "${out}")"

        if [ -n "${error}" ]
        then
          echo "::error::${error}"
          echo "error=${error}" >> $GITHUB_OUTPUT
        fi

        if git status --porcelain --untracked-files=no
        then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

        versions=()
        [ -f .versionbot/CHANGELOG.yml ] && versions+=($(yq e '.[0].version' .versionbot/CHANGELOG.yml))
        version="${versions[0]}"

        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "tag=v${version}" >> $GITHUB_OUTPUT
        echo "artifact=source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}" >> $GITHUB_OUTPUT

    # if nothing has changed, avoid commit and push
    # this *should* interrupt actions loops when a versioned commit in the main branch triggers a another run
    # by this point there should be no further changes because the versioned commit does not have a change-type
    - name: Create versioned commit
      shell: bash
      if: steps.versionist.outputs.changed == 'true'
      env:
        GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
        TAG: ${{ steps.versionist.outputs.tag }}
      run: |
        git add --all
        git commit -m "${TAG}"
        git tag -a "${TAG}" -m "${TAG}" -f
        git show -1
        git log -n 2

    - name: Push versioned commit
      shell: bash
      if: |
        steps.versionist.outputs.changed == 'true' &&
        (
          (
            github.event_name == 'push'
          ) || (
            github.event_name == 'pull_request' &&
            github.event.action == 'closed' &&
            github.event.pull_request.merged == true
          )
        )
      run: |
        git push origin HEAD:refs/heads/${{ github.base_ref || github.ref_name }}
        # We push the tag separately so that it is only pushed if the commit push succeed, this avoids
        # issues if something else updates the main branch whilst we're running and causes us to push
        # the tag successfully but not the main branch and breaks future versioning attempts
        git push origin "refs/tags/${{ steps.versionist.outputs.tag }}"

    # https://github.com/actions/upload-artifact#maintaining-file-permissions-and-case-sensitive-files
    - name: Compress source
      shell: bash
      run: tar -acvf ${{ runner.temp }}/source.tgz .

    - name: Upload artifact
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3
      with:
        name: ${{ steps.versionist.outputs.artifact }}
        path: ${{ runner.temp }}/source.tgz
        retention-days: 1
